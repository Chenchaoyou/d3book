[
["index.html", "D3 for R Users 1 Introduction", " D3 for R Users Joyce Robbins 2019-08-07 1 Introduction This guide adapts Scott Murray’s Interactive Data Visualization for the Web, 2nd edition–a required text for GR5702–for the needs of this course. Be sure to get the second edition, which is a comprehensive update to D3 version 4. The first edition uses D3 version 3, which is not compatible. (To add to the complication, the current version of D3 is v5. However, since differences between v4 and v5 are minimal, unless otherwise indicated in this guide, the code in IDVW2 will work with either.) We rely on the text heavily but also deviate from it in several ways. IDVW2 is written for graphics designers not data science students so the pain points are somewhat different. As the title states, my intended audience is R users, though you certainly don’t need to know R to use this resource. In terms of content, we will use certain ES6 conventions not covered in IDVW2 that make coding easier (and more like R!). We use different examples, though you are strongly encouraged to study Murray’s code examples in addition to reading the text. Particularly through the first half, we don’t follow the text in order, so always refer to this guide first which will direct you to the pages of the text that you should read. Without further ado, let’s start coding. "],
["jump-in-the-deep-end.html", "2 Jump in the deep end 2.1 Setup 2.2 View the DOM in the Elements pane 2.3 The JavaScript console 2.4 Use D3 to change elements on the page 2.5 Transitions 2.6 Interactivity", " 2 Jump in the deep end Let’s skip the explanations and start coding in D3 right now. Why? So you can see the benefits and know what you’re working toward when you get stuck in the weeds. Then we’ll go back and start learning step by step. 2.1 Setup If you don’t have it already, download the Chrome browser. 2.2 View the DOM in the Elements pane First, you will need a downloaded copy of shapes.html. To download, open the following page and then click File, Save Page As…: shapes.html. (Or download a zip of the whole repo. Clicking here will start the download. Or fork and clone the repo). If Chrome is your default browser, you can open shapes.html by double clicking it. Otherwise, open it with File, Open File… in Chrome. Click View, Developer, Developer Tools, then the Elements tab. Hover the mouse over various elements in the &lt;body&gt; ... &lt;/body&gt; section. Observe the highlighted sections in the rendered web page on the left of the screen. Click on the mini black triangles to the left of the &lt;body&gt; and &lt;svg&gt; tags if needed to open these sections of the DOM tree. Your screen should look like this: Now try the reverse: right click on elements on the web page, choose “Inspect” and see what is highlighted in the Elements pane. Get comfortable with the connection between the code on the right and the rendered elements on the left. 2.3 The JavaScript console Switch to the Console tab, next to the Elements tab. Let’s practice running some code (think R console.) Note that the code is unrelated to the shapes.html web page that we have open. Type the following lines of code at the prompt (&gt;), press enter after each line–that is, after the semicolon (;)–and see what happens: 3 + 4; &quot;3&quot; + &quot;4&quot;; x = [1, 2, 3]; x[1]; x + 1; y = {a: 3, b: 4}; y[&quot;b&quot;]; 2.4 Use D3 to change elements on the page Now we’ll start using D3 to manipulate elements on the page. Try the following, by entering one line at a time in the Console as before: d3.select(&quot;circle&quot;).attr(&quot;cx&quot;, &quot;200&quot;); d3.select(&quot;circle&quot;).attr(&quot;cx&quot;, &quot;500&quot;); d3.select(&quot;circle&quot;).attr(&quot;cx&quot;, &quot;100&quot;); d3.select(&quot;circle&quot;).attr(&quot;r&quot;, &quot;30&quot;); d3.select(&quot;circle&quot;).attr(&quot;r&quot;, &quot;130&quot;); d3.select(&quot;circle&quot;).attr(&quot;r&quot;, &quot;3&quot;); d3.select(&quot;circle&quot;).attr(&quot;fill&quot;, &quot;red&quot;); d3.select(&quot;circle&quot;).attr(&quot;fill&quot;, &quot;aliceblue&quot;); d3.select(&quot;circle&quot;).attr(&quot;fill&quot;, &quot;lightseagreen&quot;); Refresh the page. What happened? Go to Elements. Look at the value of the y1 attribute of the SVG &lt;line&gt; element. Go back to the Console and enter the following: d3.select(&quot;line&quot;).attr(&quot;y1&quot;, &quot;10&quot;); Switch back to Elements and observe. What happened? Stay in Elements and refresh the page. What happened to y1? Return to the Console to make style changes to the HTML elements: d3.select(&quot;h1&quot;).style(&quot;color&quot;, &quot;purple&quot;); d3.select(&quot;h2&quot;).style(&quot;font-size&quot;, &quot;50px&quot;); d3.select(&quot;h2&quot;).style(&quot;font-family&quot;, &quot;Impact&quot;); 2.5 Transitions Try these: d3.select(&quot;circle&quot;).transition().duration(2000).attr(&quot;cx&quot;, &quot;400&quot;); d3.select(&quot;ellipse&quot;).transition().duration(2000).attr(&quot;transform&quot;, &quot;translate (400, 400)&quot;); d3.select(&quot;line&quot;).transition().duration(2000).attr(&quot;x1&quot;, &quot;400&quot;); d3.select(&quot;line&quot;).transition().duration(2000).attr(&quot;y1&quot;, &quot;250&quot;); d3.select(&quot;p&quot;).transition().duration(2000).style(&quot;font-size&quot;, &quot;72px&quot;); Experiment with more transitions. 2.6 Interactivity Set up a function to turn the fill color to yellow: function goyellow() {d3.select(this).attr(&quot;fill&quot;, &quot;yellow&quot;)}; Add an event listener to the circle that will be trigger a call to goyellow() on a mouseover: d3.select(&quot;circle&quot;).on(&quot;mouseover&quot;, goyellow); Test it out. Add the same event listener to the ellipse. Test it out. Create a function goblue() that changes the fill color to blue. Add event listeners to the circle and ellipse that will trigger a call to goblue() on a mouseout. Test out your code. Try out a click event. (Note the use of an anonymous function.) d3.select(&quot;line&quot;).on(&quot;click&quot;, function() {d3.select(this).attr(&quot;stroke-width&quot;, &quot;10&quot;);}); Try another click event. What’s happening? d3.select(&quot;svg&quot;).on(&quot;click&quot;, function() {d3.select(&quot;text&quot;).text(`(${d3.mouse(this)})`)}); Ok, now that we have a taste for what D3 can do, let’s break it down, which we’ll do in the next chapter. "],
["web-tech.html", "3 Web tech 3.1 HTML – HyperText Markup Language 3.2 CSS – Cascading Style Sheets 3.3 SVG – Scalable Vector Graphics 3.4 JavaScript 3.5 D3 – Data Driven Documents 3.6 Putting it all together", " 3 Web tech Read: Chapter 3 “Technology Fundamentals” (pp. 17-62) There is a lot of material in this chapter. It is worth making the effort to learn it now and start D3 with a solid foundation of elementary HTML/CSS/SVG/JavaScript. Here we examine shapes.html from Chapter 1 to see how the various technologies are combined into a single document. 3.1 HTML – HyperText Markup Language Note that shapes.html has an HTML extension; HTML in fact provides the structure for the document. It has a &lt;head&gt; and &lt;body&gt; section. In the &lt;head&gt; section we use &lt;script&gt; tags to link to the D3 library: &lt;script src=&quot;https://d3js.org/d3.v5.min.js&quot;&gt;&lt;/script&gt;` 3.2 CSS – Cascading Style Sheets CSS is used for styling web pages, and more importantly for our purposes, selecting elements on a page or in a graphic. shapes.html has style information in the &lt;head&gt; section that uses CSS: &lt;style type=&quot;text/css&quot;&gt; h1 {color:red;} /* CSS styling */ p {color:blue;} &lt;/style&gt; Here we specify that all HTML &lt;h1&gt; headers should be red and all HTML paragraphs &lt;p&gt; should be blue. This is an example of an internal style sheet. Later we will consider alternatives: external style sheets and inline styling. 3.3 SVG – Scalable Vector Graphics SVG is a human readable graphics format that facilitates manipulation of individual elements. You may be familiar with .svg files. Here we have SVG graphics within &lt;svg&gt; tags in the &lt;body&gt; section of the HTML document: &lt;svg width=&quot;500&quot; height=&quot;300&quot;&gt; &lt;!-- some SVG --&gt; &lt;rect x=&quot;20&quot; y=&quot;20&quot; width=&quot;460&quot; height=&quot;260&quot; fill=&quot;lightblue&quot;&gt;&lt;/rect&gt; &lt;circle cx=&quot;50&quot; cy=&quot;75&quot; r=&quot;20&quot; fill=&quot;blue&quot;&gt;&lt;/circle&gt; &lt;ellipse cx=&quot;175&quot; cy=&quot;100&quot; rx=&quot;45&quot; ry=&quot;30&quot; fill=&quot;green&quot;&gt;&lt;/ellipse&gt; &lt;text x=&quot;150&quot; y=&quot;200&quot;&gt;(150, 200)&lt;/text&gt; &lt;line x1=&quot;250&quot; y1=&quot;150&quot; x2=&quot;300&quot; y2=&quot;200&quot; stroke=&quot;red&quot; stroke-width=&quot;5&quot;&gt;&lt;/line&gt; &lt;/svg&gt; Rendered: ` (150, 200) There are very few SVG tags that you’ll need to know, and once we get going with D3, you will not have to code any SVG manually. It is worth doing a little to become familiar with the format and in particular to get used to the new location of the origin. 3.4 JavaScript JavaScript is the most common language for making web pages interactive. Code is executed when page is opened or refreshed. So far we have run JavaScript in the Console, but have not included it in the web page itself. When we do so, it will be between &lt;script&gt; tags in the &lt;body&gt; section of the HTML document. 3.5 D3 – Data Driven Documents D3 is a JavaScript library well suited to interactive graphics. As such, it is also included between &lt;script&gt; tags in the &lt;body&gt; section. For D3 to work, you must link to the D3 library in the &lt;head&gt; section of the document. There seems to be a misconception that D3 is a high level language. It is not. You will be working on the pixel level to create graphics, including drawing your own axes and doing other things that you’re not used to doing if you’ve been working in R or Python. (On the bright side, after D3, R base graphics will seem very high level.) It is legitimate to ask why you need to know D3 as a data scientist. Many if not most of you will not be coding in JavaScript from the ground up in your future careers. However, it’s a great way to learn how interactive graphics work under the hood, and will give you a solid foundation which you can draw on to tweak visualizations that you build with high level tools such as Plotly. 3.6 Putting it all together While shapes.html appears as a single consistent document, it is actually comprised of multiple languages. HTML, CSS, and SVG are already there, and we will be adding JavaScript / D3 soon. Of note: An HTML is composed of lines or sections set off with tags. In particular &lt;style&gt; ... &lt;/style&gt;, &lt;svg&gt; ... &lt;/svg&gt;, and &lt;script&gt; ... &lt;/script&gt; indicate the inclusion of CSS, SVG, and JavaScript/D3 respectively. For D3 to work, you must link to a D3 library. Here we link to an online version, but you can also download a copy from https://d3js.org and reference the local copy with: &lt;script src=&quot;d3.js&quot;&gt;&lt;/script&gt; Comment syntax varies with language: &lt;!-- single or multiline HTML or SVG comment --&gt; /* single or multiline CSS comment */ // single line JavaScript comment /* JavaScript multiline comment */ "],
["back-to-d3.html", "4 Back to D3 4.1 Selections 4.2 Example one 4.3 Example two", " 4 Back to D3 4.1 Selections 4.1.1 Select by tag The ability to select elements on a page is key to being able to manipulate them. d3.select() will select the first match; d3.selectAll() will select all matches. Chaining, similar to the tidyverse pipe operator %&gt;%, allows us to act on the selected elements. For example: d3.select(&quot;circle&quot;); selects the first circle in the order in which circles appear in the &lt;svg&gt; grouping. If there were more than one circle we could select them all with: d3.selectAll(&quot;circle&quot;); We can select HTML elements by tag in the same way: d3.select(&quot;h1&quot;); d3.selectAll(&quot;h1&quot;); 4.1.2 Select by class Classes 4.2 Example one 4.3 Example two "],
["final-words.html", "5 Final Words", " 5 Final Words We have finished a nice book. "],
["scales.html", "6 Scales", " 6 Scales "]
]
