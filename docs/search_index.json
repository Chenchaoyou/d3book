[
["index.html", "D3 for R Users Welcome", " D3 for R Users Joyce Robbins 2019-11-26 Welcome rect { pointer-events: all; } .node { fill: blue; } .cursor { fill: none; stroke: brown; pointer-events: none; } .link { stroke: red; } .svg-container { display: inline-block; position: relative; width: 100%; padding-bottom: 20%; vertical-align: top; overflow: hidden; } .svg-content { display: inline-block; position: absolute; top: 0; left: 0; } Adapted from Build Your Own Graph! This guide serves as a companion text to Scott Murray’s Interactive Data Visualization for the Web, 2nd edition–a required text for GR5702. Be sure to get the second edition, which is a comprehensive update to D3 version 4. The first edition uses D3 version 3, which is not compatible. (To add to the complication, the current version of D3 is v5. However, since differences between v4 and v5 are minimal, unless otherwise indicated in this guide, the code in IDVW2 will work with either.) We rely on the text heavily but also deviate from it in several ways. IDVW2 is written for graphics designers not data science students so the pain points are somewhat different. In terms of content, we will use certain ES6 conventions not covered in IDVW2 that make coding easier (and more like R!). We use different examples, though you are strongly encouraged to study Murray’s code examples in addition to reading the text. Particularly through the first half, we don’t follow the text in order, so always refer to this guide first which will direct you to the pages of the text that you should read. This is very much a work-in-progress so please submit issues on GitHub to provide feedback and edit or add text by submitting pull requests. (Click the icon at the top of each page to get started. More detailed instructions are available on edav.info. If you would just like to view the source code, click the icon.) "],
["jump.html", "1 Jump in the deep end 1.1 Get ready 1.2 Elements tab 1.3 Console tab 1.4 Modify elements 1.5 Add transitions 1.6 Add interactivity ", " 1 Jump in the deep end Let’s skip the explanations and start coding in D3 right now. Why? So you can see the benefits and know what you’re working toward when you get stuck in the weeds. Then we’ll go back and start learning step by step. 1.1 Get ready If you don’t have it already, download the Chrome browser. Download a copy of shapes.html: open the following page and then click File, Save Page As…: shapes.html. (Or download a zip of the whole repo. Clicking here will start the download. Or fork and clone the repo). If Chrome is your default browser, open shapes.html by double clicking it. Otherwise, open it with File, Open File… in Chrome. 1.2 Elements tab In Chrome, click View, Developer, Developer Tools, then the Elements tab. Hover the mouse over various elements in the &lt;body&gt; ... &lt;/body&gt; section. Observe the highlighted sections in the rendered web page on the left of the screen. Click on the mini black triangles to the left of the &lt;body&gt; and &lt;svg&gt; tags if needed to open these sections of the DOM tree. Your screen should look like this: Now try the reverse: right click on elements on the web page, choose “Inspect” and see what is highlighted in the Elements pane. Get comfortable with the connection between the code on the right and the rendered elements on the left. 1.3 Console tab Switch to the Console tab, next to the Elements tab. Let’s practice running some code. Note that the code is unrelated to the shapes.html web page that we have open. We will spend a lot of time in the Console since it’s interactive – think R console. Eventually we will switch to including JavaScript/D3 in .html or .js files and use the Console only for testing things out or debugging. Type the following lines of code at the prompt (&gt;), press enter after each line–that is, after the semicolon (;)–and see what happens: 3 + 4; &quot;3&quot; + &quot;4&quot;; x = [1, 2, 3]; x[1]; x + 1; y = {a: 3, b: 4}; y[&quot;b&quot;]; 1.4 Modify elements Now we’ll start using D3 to manipulate elements on the page. Try the following, by entering one line at a time in the Console as before: d3.select(&quot;circle&quot;).attr(&quot;cx&quot;, &quot;200&quot;); d3.select(&quot;circle&quot;).attr(&quot;cx&quot;, &quot;500&quot;); d3.select(&quot;circle&quot;).attr(&quot;cx&quot;, &quot;100&quot;); d3.select(&quot;circle&quot;).attr(&quot;r&quot;, &quot;30&quot;); d3.select(&quot;circle&quot;).attr(&quot;r&quot;, &quot;130&quot;); d3.select(&quot;circle&quot;).attr(&quot;r&quot;, &quot;3&quot;); d3.select(&quot;circle&quot;).attr(&quot;fill&quot;, &quot;red&quot;); d3.select(&quot;circle&quot;).attr(&quot;fill&quot;, &quot;aliceblue&quot;); d3.select(&quot;circle&quot;).attr(&quot;fill&quot;, &quot;lightseagreen&quot;); Note that “select” and “attr” are separate operations chained together with “.” – think pipe (%&gt;%) operator. Refresh the page. What happened? Go to Elements. Look at the value of the y1 attribute of the SVG &lt;line&gt; element. Go back to the Console and enter the following: d3.select(&quot;line&quot;).attr(&quot;y1&quot;, &quot;10&quot;); Switch back to Elements and observe. What happened? Stay in Elements and refresh the page. What happened to y1? Return to the Console to make style changes to the HTML elements: d3.select(&quot;h1&quot;).style(&quot;color&quot;, &quot;purple&quot;); d3.select(&quot;h2&quot;).style(&quot;font-size&quot;, &quot;50px&quot;); d3.select(&quot;h2&quot;).style(&quot;font-family&quot;, &quot;Impact&quot;); 1.5 Add transitions Try these: d3.select(&quot;circle&quot;).transition().duration(2000).attr(&quot;cx&quot;, &quot;400&quot;); d3.select(&quot;ellipse&quot;).transition().duration(2000).attr(&quot;transform&quot;, &quot;translate (400, 400)&quot;); d3.select(&quot;line&quot;).transition().duration(2000).attr(&quot;x1&quot;, &quot;400&quot;); d3.select(&quot;line&quot;).transition().duration(2000).attr(&quot;y1&quot;, &quot;250&quot;); d3.select(&quot;p&quot;).transition().duration(2000).style(&quot;font-size&quot;, &quot;72px&quot;); Experiment with more transitions. 1.6 Add interactivity Set up a function to turn the fill color to yellow: function goyellow() {d3.select(this).attr(&quot;fill&quot;, &quot;yellow&quot;)}; Add an event listener to the circle that will be trigger a call to goyellow() on a mouseover: d3.select(&quot;circle&quot;).on(&quot;mouseover&quot;, goyellow); Test it out. Add the same event listener to the ellipse. Test it out. Create a function goblue() that changes the fill color to blue. Add event listeners to the circle and ellipse that will trigger a call to goblue() on a mouseout. Test out your code. Try out a click event. (Note the use of an anonymous function.) d3.select(&quot;line&quot;).on(&quot;click&quot;, function() {d3.select(this).attr(&quot;stroke-width&quot;, &quot;10&quot;);}); Try another click event. What’s happening? d3.select(&quot;svg&quot;).on(&quot;click&quot;, function() {d3.select(&quot;text&quot;).text(`(${d3.mouse(this)})`)}); "],
["web.html", "2 Web tech 2.1 HTML 2.2 CSS 2.3 SVG 2.4 JavaScript 2.5 D3 2.6 HTML tree 2.7 Exercise : shapes", " 2 Web tech Read IDVW2, Chapter 3: Technology Fundamentals There is a lot of material in this chapter. It is worth making the effort to learn it now and start D3 with a solid foundation of elementary HTML/CSS/SVG/JavaScript. Here we examine shapes.html from Chapter 1 to see how the various technologies are combined into a single document. 2.1 HTML Note that shapes.html has an HyperText Markup Language or .html extension; HTML in fact provides the structure for the document. It has a &lt;head&gt; and &lt;body&gt; section. In the &lt;head&gt; section we use &lt;script&gt; tags to link to the D3 library: &lt;script src=&quot;https://d3js.org/d3.v5.js&quot;&gt;&lt;/script&gt; HTML content is enclosed between opening an closing tags such as &lt;h1&gt; and &lt;/h1&gt;. HTML class and ID attributes are included inside the opening tags: &lt;h1 class=&quot;myclass&quot; id=&quot;myid&quot;&gt;This is an h1 header.&lt;/h1&gt; 2.2 CSS CSS (Cascading Style Sheets) is used for styling web pages, and more importantly for our purposes, selecting elements on a page or in a graphic. We will generally work with internal style sheets since it’s simpler when starting out to have everything in one document. External style sheets, however, are generally the preferred method for web design. 2.2.1 Internal style sheet shapes.html has an internal style sheet: CSS style information appears in the &lt;head&gt; section marked off with &lt;style&gt; tags: &lt;style type=&quot;text/css&quot;&gt; h1 {color:red;} /* CSS styling */ p {color:blue;} &lt;/style&gt; Here we specify that all HTML &lt;h1&gt; headers should be red and all HTML paragraphs &lt;p&gt; should be blue. This is an example of an internal style sheet. Later we will consider alternatives: external style sheets and inline styling. Styling for coder designed classes is also specified in this section. For example, we could style a “formal” class as such: &lt;style type=&quot;text/css&quot;&gt; .formal {color: red; font-size: 30px; font-family: Lucida Calligraphy; } &lt;/style&gt; Note that classes are defined by the “.” before the name. 2.2.2 External style sheets External style sheets are .css files that contain styling information and are linked to with a &lt;link&gt; tag in the &lt;head&gt; section of an HTML document: &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt; &lt;/head&gt; External style sheets are the preferred way of styling as they can easily be modified without changing the web page; in fact, the motivation for CSS came from a desire in the early days of the internet to separate styling from content. Developers have the option now of choosing premade themes, which are shared through external style sheets. They can be quite complex. The .css file for the Minty theme from Bootswatch, for example, contains over 10,000 lines. CSS Zen Garden demonstrates the power of external style sheets: the same HTML document takes on very different looks depending on the stylesheet to which it is linked. 2.2.3 Inline styling With inline styling, styling is added to each tag individually: &lt;span style=&quot;color: white; background-color: fuchsia; font-family: impact; font-size: 24px; border-style: solid; border-color: limegreen; border-width: 3px&quot;&gt; Styled inline &lt;/span&gt; Styled inline This is how early web pages were styled. To take a step back in time, use developer tools to view the source code for the main page of www.dolekemp96.org, an old web site that has been maintained for historical purposes. As you can see, it’s a tedious way of writing content, which internal and external style sheets eliminate. Although you will not be adding inline styling manually, you will notice that when we select elements and change the styling with D3, the modifications are made inline. In other words, we do not make changes to the elements directly, not via a style sheet. 2.3 SVG SVG (Scalable Vector Graphics) is a human readable graphics format that facilitates manipulation of individual elements. You may be familiar with .svg files. Here we have SVG graphics within &lt;svg&gt; tags in the &lt;body&gt; section of the HTML document: &lt;svg width=&quot;500&quot; height=&quot;300&quot;&gt; &lt;!-- some SVG --&gt; &lt;rect x=&quot;20&quot; y=&quot;20&quot; width=&quot;460&quot; height=&quot;260&quot; fill=&quot;lightblue&quot;&gt;&lt;/rect&gt; &lt;circle cx=&quot;50&quot; cy=&quot;75&quot; r=&quot;20&quot; fill=&quot;blue&quot;&gt;&lt;/circle&gt; &lt;ellipse cx=&quot;175&quot; cy=&quot;100&quot; rx=&quot;45&quot; ry=&quot;30&quot; fill=&quot;green&quot;&gt;&lt;/ellipse&gt; &lt;text x=&quot;150&quot; y=&quot;200&quot;&gt;(150, 200)&lt;/text&gt; &lt;line x1=&quot;250&quot; y1=&quot;150&quot; x2=&quot;300&quot; y2=&quot;200&quot; stroke=&quot;red&quot; stroke-width=&quot;5&quot;&gt;&lt;/line&gt; &lt;/svg&gt; Rendered: ` (150, 200) There are very few SVG tags that you’ll need to know, and once we get going with D3, you will not have to code any SVG manually. It is worth doing a little to become familiar with the format and in particular to get used to the new location of the origin. 2.4 JavaScript JavaScript is the most common language for making web pages interactive. Code is executed when pages are opened or refreshed. So far we have run JavaScript in the Console, but have not included it in the web page itself. When we do so, it will be between &lt;script&gt; tags in the &lt;body&gt; section of the HTML document, or in a separate .js file. 2.5 D3 D3 (Data Driven Documents) is a JavaScript library well suited to interactive graphics. As such, it is also included between &lt;script&gt; tags in the &lt;body&gt; section. For D3 to work, you must link to the D3 library in the &lt;head&gt; section of the document. There seems to be a misconception that D3 is a high level language. It is not. You will be working on the pixel level to create graphics, including drawing your own axes and doing other things that you’re not used to doing if you’ve been working in R or Python. On the bright side, after D3, you will gain a new appreciation for base R graphics. You will write code such as plot(iris$Sepal.Length, iris$Sepal.Width, pch = 16, col = iris$Species, las = 1, xlab = &quot;Sepal.Length&quot;, ylab = &quot;Sepal.Width&quot;) and think: wow, there are axes! Amazing! It is legitimate to ask why you need to know D3 as a data scientist. Many if not most of you will not be coding in JavaScript from the ground up in your future careers. However, it’s a great way to learn how interactive graphics work under the hood, and will give you a solid foundation which you can draw on to tweak visualizations that you build with high level tools such as Plotly. 2.6 HTML tree While shapes.html appears as a single consistent document, it is actually comprised of multiple languages. HTML, CSS, and SVG are already there, and we will be adding JavaScript / D3 soon. Of note: An HTML document is composed of lines or sections set off with tags. In particular &lt;style&gt; ... &lt;/style&gt;, &lt;svg&gt; ... &lt;/svg&gt;, and &lt;script&gt; ... &lt;/script&gt; indicate the inclusion of CSS, SVG, and JavaScript/D3 respectively. For D3 to work, you must link to a D3 library. To link to the online version, copy and paste the &lt;script&gt; line from https://d3js.org. Alternatively, you can also download a copy from the same site and reference your local copy with: &lt;script src=&quot;d3.js&quot;&gt;&lt;/script&gt; There are two main sections. The &lt;head&gt; section contains the title, link to D3 library, and internal CSS. The &lt;body&gt; section contains HTML elements (&lt;h1&gt;, &lt;p&gt;, etc.), SVGs (between &lt;svg&gt;/&lt;/svg&gt;tags) and JavaScript/D3 scripts (between &lt;script&gt;/&lt;script&gt;tags). Do not assume that if it works that it is correct; today’s browsers can be very forgiving. Comment syntax varies with language: &lt;!-- single or multiline HTML or SVG comment --&gt; /* single or multiline CSS comment */ // single line JavaScript comment /* JavaScript multiline comment */ 2.7 Exercise : shapes Download a fresh copy of shapes.html. (Reminder: open the following page and then click File, Save Page As…: shapes.html). Open the file in a text editor of your choice on one half of your screen. If you don’t want to think about it, just use RStudio since it’s already installed and provides syntax highlighting for .html. On the other half of your screen open the same file in Chrome. Developer Tools should not be open; we will not be using the Console. As you make changes to the .html file, save the file and then refresh the browser to see the effects. Keyboard shortcuts to save and refresh are helpful here. Your screen should look like this: Add an additional circle to the svg. Add styling to the internal style sheet to style circles. Add two additional paragraphs use the &lt;p&gt; tag. Add an ID attribute to one of the circles. Add a class attribute to two of the &lt;p&gt; tags. Use the internal style sheet to style paragraphs of the class you created in 5. Adjust additional elements as desired. "],
["d3console.html", "3 D3 in the Console 3.1 Selections 3.2 Modify existing elements 3.3 Add elements 3.4 Remove elements 3.5 Exercise : green circles 3.6 Exercise : blue circles 3.7 Bind data… finally! 3.8 Exercise : data bind", " 3 D3 in the Console Read IDVW2, Chapter 6: Drawing with Data. Skip pp. 89-96 as we will not be drawing bar charts with the divapproach. 3.1 Selections 3.1.1 Select by tag The ability to select elements on a page is key to being able to manipulate them. d3.select() will select the first match; d3.selectAll() will select all matches. d3.select(&quot;svg&quot;).select(&quot;circle&quot;); selects the first circle in the order in which circles appear in the &lt;svg&gt; grouping. If there were more than one circle we could select them all with: d3.select(&quot;svg&quot;).selectAll(&quot;circle&quot;); We can select HTML elements by tag in the same way: d3.select(&quot;body&quot;).select(&quot;h1&quot;); d3.select(&quot;body&quot;).selectAll(&quot;h1&quot;); 3.1.2 Select by class Classes are selected by adding a “.” before the class name: d3.select(&quot;svg&quot;).selectAll(&quot;circle.apple&quot;) This provides one method of selecting a certain collection of elements of the same type. 3.1.3 Select by ID IDs differ from classes in that they are unique identifies. IDs are selected by adding a “#” before the ID: d3.select(&quot;svg&quot;).select(&quot;circle#henry&quot;); 3.1.4 Store selections It is often helpful to store selections for later use. Here we store the svg selection in mysvg: var mysvg = d3.select(&quot;svg&quot;); The JavaScript community is moving toward using let and const instead of var; we, however, will stick with var to be consistent with IDVW2. Of course you’re welcome to use const and let instead, and if so, may find these articles helpful: Let It Be - How to declare JavaScript variables and ES2015 const is not about immutability. Store circle selection in a variable: var svg = d3.select(&quot;svg&quot;); var circ = svg.selectAll(&quot;circle&quot;); 3.2 Modify existing elements Try out the code in this section with a downloaded copy of five_green_circles.html opened in Chrome and the Console visible. 3.2.1 Modify attributes link to get or set attribute API d3.select(&quot;circle&quot;).attr(&quot;r&quot;); // see radius d3.select(&quot;circle&quot;).attr(&quot;r&quot;, &quot;10&quot;); // set radius to 10 3.2.2 Modify styles link to get or set style API d3.select(&quot;h1&quot;).style(&quot;color&quot;); d3.select(&quot;h1&quot;).style(&quot;color&quot;, &quot;blue&quot;); It is often difficult to remember whether to use .attr() or .style() In general, properties such as position on the SVG, class, and ID are attributes, while decorative properties such as color, font, font size, etc. are styles. However, in some cases, you can use either. For example, the following both make the circle blue: d3.select(&quot;circle&quot;).attr(&quot;fill&quot;, &quot;blue&quot;); d3.select(&quot;circle&quot;).style(&quot;fill&quot;, &quot;blue&quot;); The first will add a fill=&quot;blue&quot; attribute to the &lt;circle&gt; tag, while the latter will add style=&quot;fill: blue;&quot;. All is well and good until you find yourself with both in the same tag, in which case the style property will take precedence. The bottom line: don’t mix the two options because it can cause problems. To further complicate matters, .style() is just shorthand for .attr(&quot;style&quot;, &quot;...&quot;) so the following are in fact equivalent: d3.select(&quot;circle&quot;).style(&quot;fill&quot;, &quot;blue&quot;); d3.select(&quot;circle&quot;).attr(&quot;style&quot;, &quot;fill: blue;&quot;); In other words, style is an attribute! 3.2.3 Modify text This section is interactive. Hover over code as directed to observe effects. HTML text .fancy { color: red; font-family: garamond; font-size: 30px; } &lt;p id=&quot;typo&quot; class=&quot;fancy&quot;&gt;Manhatten&lt;/p&gt; Manhatten Hover to execute this code (and fix the typo): d3.select(&quot;#typo&quot;).text(&quot;Manhattan&quot;); SVG text &lt;svg width=&quot;500&quot; height=&quot;100&quot;&gt; &lt;rect width=&quot;500&quot; height=&quot;100&quot; fill=&quot;#326EA4&quot;&gt;&lt;/rect&gt; &lt;text id=&quot;svgtypo&quot; x=&quot;50&quot; y=&quot;70&quot; fill=&quot;white&quot; font-weight=&quot;bold&quot; font-size=&quot;40px&quot;&gt; Web scrapping is fun.&lt;/text&gt; &lt;/svg&gt; Hover on this SVG to execute the code below it (and fix the typo): Web scrapping is fun. d3.select(&quot;#svgtypo&quot;).text(&quot;Web scraping is fun.&quot;); The SVG &lt;text&gt; tag can be tricky. It differs from HTML text tags (&lt;p&gt;, &lt;h1&gt;, &lt;h2&gt;, etc.) in that it has x and y attributes that allow you to position text on an SVG canvas. Unlike HTML, the fill attribute controls the color of the text. Compare: d3.select(&quot;p&quot;).style(&quot;color&quot;, &quot;red&quot;); // HTML d3.select(&quot;text&quot;).attr(&quot;fill&quot;, &quot;red&quot;); // SVG 3.2.4 Move SVG text &lt;svg width=&quot;600&quot; height=&quot;100&quot;&gt; &lt;rect width=&quot;600&quot; height=&quot;100&quot; fill=&quot;#326EA4&quot;&gt;&lt;/rect&gt; &lt;text id=&quot;moveleft&quot; x=&quot;200&quot; y=&quot;70&quot; fill=&quot;white&quot; font-weight=&quot;bold&quot; font-size=&quot;40px&quot;&gt; I want to move left.&lt;/text&gt; &lt;/svg&gt; Hover on this SVG to execute the code below it: I want to move left. d3.select(&quot;#moveleft&quot;).attr(&quot;x&quot;, &quot;20&quot;).text(&quot;Thanks, now I&#39;m happy!&quot;); 3.3 Add elements 3.3.1 HTML Continue trying out code with five_green_circles.html open in Chrome. The following adds a &lt;p&gt; tag but doesn’t change how the page looks, since there’s no text associated with it. d3.select(&quot;body&quot;).append(&quot;p&quot;); To add text, use .text(): d3.select(&quot;body&quot;).append(&quot;p&quot;).text(&quot;This is a complete sentence.&quot;); To debug adding an element, go to the Elements tab to see what was added and where. If an element is in the wrong place in the HTML tree, it will not be visible. 3.3.2 SVG Likewise, here we add a &lt;circle&gt; to the &lt;svg&gt;, but we can’t see it since it has no attributes. d3.select(&quot;svg&quot;).append(&quot;circle&quot;); Adding attributes will create visible circles: d3.select(&quot;svg&quot;).append(&quot;rect&quot;).attr(&quot;x&quot;, &quot;0&quot;).attr(&quot;y&quot;, &quot;0&quot;) .attr(&quot;width&quot;, &quot;500&quot;).attr(&quot;height&quot;, &quot;400&quot;).attr(&quot;fill&quot;, &quot;lightblue&quot;); d3.select(&quot;svg&quot;).append(&quot;circle&quot;).attr(&quot;cx&quot;, &quot;200&quot;) .attr(&quot;cy&quot;, &quot;100&quot;).attr(&quot;r&quot;, &quot;25&quot;).attr(&quot;fill&quot;, &quot;orange&quot;); d3.select(&quot;svg&quot;).append(&quot;circle&quot;).attr(&quot;cx&quot;, &quot;300&quot;) .attr(&quot;cy&quot;, &quot;150&quot;).attr(&quot;r&quot;, &quot;25&quot;).attr(&quot;fill&quot;, &quot;red&quot;); We can use a saved selection to assist in creating a new element: (IDVW2, pp. 97-98) mysvg = d3.select(&quot;svg&quot;); mysvg.append(&quot;circle&quot;).attr(&quot;cx&quot;, &quot;250&quot;).attr(&quot;cy&quot;, &quot;250&quot;).attr(&quot;r&quot;, &quot;50&quot;) .attr(&quot;fill&quot;, &quot;red&quot;); 3.4 Remove elements These methods will remove matching elements in order, starting with the first find in the document. 3.4.1 HTML d3.select(&quot;p&quot;).remove(); 3.4.2 SVG d3.select(&quot;svg&quot;).select(&quot;circle&quot;).remove(); d3.select(&quot;svg&quot;).selectAll(&quot;circle&quot;).remove(); 3.5 Exercise : green circles Download and open a fresh copy of five_green_circles.html in Chrome. Open Developer Tools open and do the following in the Console with D3: Select the circle with ID “henry” and make it blue. Select all circles of “apple” class make them red. Select the first circle and add an orange border (“stroke”), and stroke width (“stroke-width”) of 5. Select all circles of “apple” class and move them to the middle of the svg. 3.6 Exercise : blue circles Download and open a fresh copy of six_blue_circles.html in Chrome. Open Developer Tools and execute Steps 1-4 one at a time in the Console. After Step 4, refresh the page to go back to Step 1 if so desired. (You do not need to create a loop as in the visual.) This exercise is provided as a challenge. It’s fine to skip this exercise and move on to the next section. Move all the circles to the right. Move them back to the left and change their color. In a text editor, add an id to the third circle in six_blue_circles.html, save the file, and then in the Console, move only that circle to the right. Move all the circles to the middle of the screen, then move them all to the same location. 3.7 Bind data… finally! (IDVW2, pp. 98-108) To follow along with the code in this section, download and open six_blue_circles.html. Bind data: d3.select(&quot;svg&quot;).selectAll(&quot;circle&quot;).data([90, 230, 140, 75, 180, 25]); Check data binding: d3.select(&quot;svg&quot;).selectAll(&quot;circle&quot;).data(); Set x-coordinate of each circle to data value using arrow function: d3.select(&quot;svg&quot;).selectAll(&quot;circle&quot;).attr(&quot;cx&quot;, d =&gt; d); Set x-coordinate of each circle to data value with a JavaScript function: d3.select(&quot;svg&quot;).selectAll(&quot;circle&quot;).attr(&quot;cx&quot;, function(d) {return d;}); We’ll bind a new set of data to the circles, this time storying the dataset in a variable: var dataset = [50, 80, 110, 140, 170, 200]; We’ll also store a selection of all circles before binding the data: var circ = d3.select(&quot;svg&quot;).selectAll(&quot;circle&quot;); And now, the data bind: circ.data(dataset); Nothing appears to have happened; the circles remain the same and there is no evidence of any changes looking at the circles in the DOM (see Elements tab). We can check that the data are indeed bound with: circ.data(); // now we see data Modify elements w/ stored selections, bound data: circ.attr(&quot;cx&quot;, function(d) {return d;}); circ.attr(&quot;cx&quot;, function(d) {return d/2;}); circ.attr(&quot;cx&quot;, function(d) {return d/4;}).attr(&quot;r&quot;, &quot;10&quot;); Same as above, using arrow functions: circ.attr(&quot;cx&quot;, d =&gt; d); circ.attr(&quot;cx&quot;, d =&gt; d/2); circ.attr(&quot;r&quot;, d =&gt; d/4).attr(&quot;r&quot;, &quot;10&quot;); Note that if we bind a new set of data to the DOM elements, the original set will be overwritten: var newdata = [145, 29, 53, 196, 200, 12]; circ.data(newdata); circ.transition() .duration(2000) .attr(&quot;cx&quot;, d =&gt; 2*d); 3.8 Exercise : data bind Download and open a fresh copy of six_blue_circles.html in Chrome and practice binding data to the circles and modifying the circles based on the data as in the examples above. "],
["update-enter-and-exit.html", "4 Update, Enter, and Exit 4.1 Lecture slides 4.2 Remove some elements 4.3 Add some elements 4.4 Data / enter / append 4.5 Exercise : horizontal bar chart 4.6 Merge selections 4.7 Exercise : merge 4.8 Groups 4.9 General Update Pattern 4.10 Exercise: : functions 4.11 Exercise : vertical bar chart", " 4 Update, Enter, and Exit IDVW2, Chapter 9, pp. 178-184; Chapter 12, pp. 231-249 4.1 Lecture slides D3 Data Bind 4.2 Remove some elements a.k.a. more DOM elements than data values We’ll start with six circles and remove some. Download and open a fresh copy of six_blue_circles.html in Chrome. Let’s bind four data values to the six circles: var svg = d3.select(&quot;svg&quot;); svg.selectAll(&quot;circle&quot;) .data([123, 52, 232, 90]); Click the black triangle to view the _enter, _exit, and _groups fields. We can store the selection in a variable: var circ = svg.selectAll(&quot;circle&quot;) .data([123, 52, 232, 90]); Let’s look at the exit selection: circ.exit(); Try this: circ.attr(&quot;fill&quot;, &quot;red&quot;); What happened and why? Now try this: circ.exit().attr(&quot;fill&quot;, &quot;purple&quot;); What happened and why? What do you think this will do? Try it. circ.exit().transition().duration(2000).remove(); Create a new variable circ2 and compare it to circ: var circ2 = d3.selectAll(&quot;circle&quot;); circ.data(); circ2.data(); circ.exit(); circ2.exit(); What’s going on? 4.3 Add some elements a.k.a. more data values than DOM elements We’ll start with six circles and add some. Let’s bind new data to the circles: var circ = svg.selectAll(&quot;circle&quot;) .data([123, 52, 232, 90, 34, 12, 189, 110]); And look at the enter selection: circ.enter(); How many placeholders are in the enter selection? Let’s add circles for each of these placeholders: circ.enter() .append(&quot;circle&quot;) .attr(&quot;cx&quot;, &quot;100&quot;) .attr(&quot;cy&quot;, (d, i) =&gt; i * 50 + 25) .attr(&quot;r&quot;, &quot;20&quot;) .attr(&quot;fill&quot;, &quot;blue&quot;); Try this: circ.transition() .duration(3000) .attr(&quot;cx&quot;, &quot;400&quot;); What do you need to do to act on all of the circles? svg.selectAll(&quot;circle&quot;) .transition() .duration(2000) .attr(&quot;cy&quot;, (d, i) =&gt; (i * 50) + 25) .attr(&quot;cx&quot;, &quot;200&quot;); 4.4 Data / enter / append We’ll start with nothing–not even an SVG–and add elements with the data / enter / append sequence. Open Developer Tools and copy and paste the code below in the Console. (Click above to close the table of contents on the left so you’ll have more screen space.) The SVG will be added here: var svg = d3.select(&quot;div#dea&quot;) .append(&quot;svg&quot;) .attr(&quot;width&quot;, &quot;400&quot;) .attr(&quot;height&quot;, &quot;250&quot;); Create an array of values: var specialdata = [75, 150, 200]; Add rectangles: svg.selectAll(&quot;rect&quot;) .data(specialdata) .enter() .append(&quot;rect&quot;) .attr(&quot;x&quot;, d =&gt; d) .attr(&quot;y&quot;, d =&gt; d) .attr(&quot;width&quot;, &quot;50&quot;) .attr(&quot;height&quot;, &quot;30&quot;) .attr(&quot;fill&quot;, &quot;pink&quot;); 4.4.1 Labels Note that we can also label the rectangles with the data value: svg.selectAll(&quot;text&quot;) .data(specialdata) .enter() .append(&quot;text&quot;) .attr(&quot;x&quot;, d =&gt; d + 25) .attr(&quot;y&quot;, d =&gt; d + 25) .text(d =&gt; d) .attr(&quot;fill&quot;, &quot;blue&quot;) .attr(&quot;text-anchor&quot;, &quot;middle&quot;); 4.5 Exercise : horizontal bar chart Create a new html file (try to recreate the template without looking… or save a copy of this one) and open it in your text editor. If you create a new file in RStudio, choose “Text File” and use the .html file extension when you save it. Do not choose “R HTML”. Add a script that adds an svg element and horizontal bars of the lengths (in pixels) specified in bardata. Create the bars with the data / enter / append sequence. var bardata = [300, 100, 150, 225, 75, 275]; 4.6 Merge selections a.k.a. combining update and enter selections with .merge() Open six_blue_circles.html in Chrome. (You do not need to download it first.) Run the following code in the Console: var svg = d3.select(&quot;svg&quot;); var circ = svg.selectAll(&quot;circle&quot;) .data([123, 52, 232, 90, 34, 12, 189, 110]); var allcirc = circ.enter() // 2 placeholders .append(&quot;circle&quot;) // placeholders -&gt; circles .attr(&quot;cx&quot;, &quot;100&quot;) // acts on enter selection only .attr(&quot;cy&quot;, (d, i) =&gt; (i - 5) * 50) .attr(&quot;r&quot;, &quot;20&quot;) .attr(&quot;fill&quot;, &quot;red&quot;); Now try to predict what the following code will do. Were you right? allcirc.transition() .duration(3000) .attr(&quot;cx&quot;, &quot;400&quot;) .attr(&quot;fill&quot;, &quot;purple&quot;); Refresh the page and then copy and paste the following into the Console and run. var svg = d3.select(&quot;svg&quot;); var circ = svg.selectAll(&quot;circle&quot;) .data([123, 52, 232, 90, 34, 12, 189, 110]); // update selection var allcirc = circ.enter() // 2 placeholders .append(&quot;circle&quot;) // placeholders -&gt; circles .attr(&quot;cx&quot;, &quot;100&quot;) // acts on enter selection only .attr(&quot;cy&quot;, (d, i) =&gt; (i - 5) * 50) .attr(&quot;r&quot;, &quot;20&quot;) .attr(&quot;fill&quot;, &quot;red&quot;) .merge(circ); // combines enter and update selections And now, the following code (same as before). What changed? Why? allcirc.transition() .duration(3000) .attr(&quot;cx&quot;, &quot;400&quot;) .attr(&quot;fill&quot;, &quot;purple&quot;); Note the pattern: Store the data bind in X. Y = X.enter().append() attributes .merge(X) Do more stuff with Y. 4.7 Exercise : merge Open the bar chart you created in the previous exercise in Chrome, or this one and work in the Console. (You don’t have to download it.) Change the data to any six other values and update the lengths of the bars. Bind a new dataset, newbardata to the bars, update the bar lengths, and remove any extra bars. newbardata = [250, 125, 80, 100]; Bind a new dataset, reallynewbardata, to the bars, then add additional bars so each data value has a bar. Make the outline (stroke) of the new bars a different color. reallynewbardata = [300, 100, 250, 50, 200, 150, 325, 275]; Use .merge() to combine the update and enter selections into one selection and then transition the height of all of the bars to half their current height. Add text labels inside the bars at the right end with the length of the bar in pixels. 4.8 Groups Open six_blue_circles.html in Chrome. (You do not need to download it first.) Run this code in the Console: var svg = d3.select(&quot;svg&quot;); var specialdata = [100, 250, 300]; var bars = svg.selectAll(&quot;rect&quot;) .data(specialdata) .enter() .append(&quot;rect&quot;) .attr(&quot;x&quot;, d =&gt; d) .attr(&quot;y&quot;, d =&gt; d) .attr(&quot;width&quot;, &quot;50&quot;) .attr(&quot;height&quot;, &quot;30&quot;) .attr(&quot;fill&quot;, &quot;red&quot;); What’s going on? Refresh the page, and try the following instead: var svg = d3.select(&quot;svg&quot;); var specialdata = [100, 250, 300]; var bars = svg.append(&quot;g&quot;) .attr(&quot;id&quot;, &quot;rects&quot;) .selectAll(&quot;rect&quot;) .data(specialdata) .enter() .append(&quot;rect&quot;) .attr(&quot;x&quot;, d =&gt; d) .attr(&quot;y&quot;, d =&gt; d) .attr(&quot;width&quot;, &quot;50&quot;) .attr(&quot;height&quot;, &quot;30&quot;) .attr(&quot;fill&quot;, &quot;red&quot;); Compare: d3.select(&quot;svg&quot;) .select(&quot;g#rects&quot;) .selectAll(&quot;rect&quot;) .attr(&quot;fill&quot;, &quot;purple&quot;); and d3.select(&quot;svg&quot;) .selectAll(&quot;rect&quot;) .attr(&quot;fill&quot;, &quot;purple&quot;); 4.9 General Update Pattern Open Developer Tools on this page. Create a function in the Console: function changedata(data) { d3.select(&quot;svg#gup&quot;) .selectAll(&quot;rect&quot;) .data(data) .attr(&quot;width&quot;, d =&gt; d); } Test it out: changedata([258, 373, 278, 9, 72, 96]); What happens if there are too many data values? changedata([196, 360, 283, 390, 46, 56, 152]); Let’s use the enter selection to add new bars in this case: function changedata(data) { var bars = d3.select(&quot;svg#gup&quot;) .selectAll(&quot;rect&quot;) .data(data); // bars is the update selection bars.enter() .append(&quot;rect&quot;) .attr(&quot;x&quot;, &quot;30&quot;) // until merge, acts on .attr(&quot;y&quot;, (d, i) =&gt; i * 50) // enter selection only .attr(&quot;height&quot;, &quot;35&quot;) .attr(&quot;fill&quot;, &quot;lightgreen&quot;) .merge(bars) // merge in the update selection .attr(&quot;width&quot;, d =&gt; d); // acts on all bars } What happens if we have more bars than data values? changedata([325, 116, 25]); Let’s add to the function to remove the extra bars in this case: function changedata(data) { var bars = d3.select(&quot;svg#gup&quot;) .selectAll(&quot;rect&quot;) .data(data); // bars is the update selection bars.enter() .append(&quot;rect&quot;) .attr(&quot;x&quot;, &quot;30&quot;) // until merge, acts on .attr(&quot;y&quot;, (d, i) =&gt; i * 50) // enter selection only .attr(&quot;height&quot;, &quot;35&quot;) .attr(&quot;fill&quot;, &quot;lightgreen&quot;) .merge(bars) // merge in the update selection .attr(&quot;width&quot;, d =&gt; d); // acts on all bars bars.exit() .remove(); } Try: changedata([271, 49, 389]); A fancy exit: function changedata(data) { var bars = d3.select(&quot;svg#gup&quot;) .selectAll(&quot;rect&quot;) .data(data); // bars is the update selection bars.enter() .append(&quot;rect&quot;) .attr(&quot;x&quot;, &quot;30&quot;) // until merge, acts on .attr(&quot;y&quot;, (d, i) =&gt; i * 50) // enter selection only .attr(&quot;height&quot;, &quot;35&quot;) .attr(&quot;fill&quot;, &quot;lightgreen&quot;) .merge(bars) // merge in the update selection .attr(&quot;width&quot;, d =&gt; d); // acts on all bars bars.exit() .attr(&quot;fill&quot;, &quot;red&quot;) .transition() .duration(2000) .attr(&quot;width&quot;, &quot;0&quot;) .remove(); } changedata([234, 129, 432, 286, 49, 372]); changedata([401, 23, 173]); VOILA! We have created the D3 General Update Pattern! More examples from Mike Bostock (creator of D3): General Update Pattern, I General Update Pattern, II General Update Pattern, III It is covered in IDVW in the “Other Kinds of Data Updates” section on pp. 178-186 in Chapter 9. (The earlier part of Chapter 9 deals with data updates in which the number of DOM elements remains the same.) Note that the General Update Pattern changed with D3 Version 4 so avoid examples from Version 3. Also available here: general_update_pattern.html &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;EDAV5_1&lt;/title&gt; &lt;script src=&quot;https://d3js.org/d3.v5.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;script id=&quot;s1&quot;&gt; // Create svg and initial bars var svg = d3.select(&quot;body&quot;) .append(&quot;svg&quot;) .attr(&quot;width&quot;, &quot;500&quot;) .attr(&quot;height&quot;, &quot;400&quot;); var bardata = [300, 100, 150, 225, 75, 275]; var bars = svg.selectAll(&quot;rect&quot;) .data(bardata); bars.enter().append(&quot;rect&quot;) .attr(&quot;x&quot;, &quot;30&quot;) .attr(&quot;y&quot;, (d, i) =&gt; i*50) .attr(&quot;width&quot;, d =&gt; d) .attr(&quot;height&quot;, &quot;35&quot;) .attr(&quot;fill&quot;, &quot;lightgreen&quot;); // General Update Pattern function update(data) { var bars = svg.selectAll(&quot;rect&quot;) // data join .data(data); bars.enter() .append(&quot;rect&quot;) // add new elements .attr(&quot;x&quot;, &quot;30&quot;) .attr(&quot;y&quot;, (d, i) =&gt; i*50) .attr(&quot;width&quot;, d =&gt; d) .attr(&quot;height&quot;, &quot;35&quot;) .attr(&quot;fill&quot;, &quot;yellow&quot;) .merge(bars) // merge .transition() .duration(2000) .attr(&quot;width&quot;, d =&gt; d) .attr(&quot;fill&quot;, &quot;orange&quot;); bars.exit().remove(); // remove extra elements } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 4.10 Exercise: : functions Open general_update_pattern.html and practice running the update() function with different datasets in the Console. For example: update([100, 200, 300]); 4.11 Exercise : vertical bar chart Change the bar chart in general_update_pattern.html to a vertical bar chart. "],
["just-enough-js.html", "5 Just Enough JS 5.1 Arrays of arrays 5.2 Arrays of objects 5.3 .map() 5.4 Sorting 5.5 D3 statistics 5.6 D3 + .map()", " 5 Just Enough JS Basics: IDVW, pp. 36-52 objects, arrays, arrays of objects, functions (and other things) 5.1 Arrays of arrays // try me in the Console var array_dataset = [[100, 75, 30], [200, 125, 20]]; d3.select(&quot;svg#arrays&quot;) .selectAll(&quot;circle&quot;) .data(array_dataset) .enter() .append(&quot;circle&quot;) .attr(&quot;cx&quot;, d =&gt; d[0]) .attr(&quot;cy&quot;, d =&gt; d[1]) .attr(&quot;r&quot;, d =&gt; d[2]) .attr(&quot;fill&quot;, &quot;red&quot;); svg#arrays 5.2 Arrays of objects // Try me in the Console var object_dataset = [ {cx: 100, cy: 150, fill: `red`}, {cx: 200, cy: 100, fill: `blue`} ]; d3.select(&quot;svg#objects&quot;) .selectAll(&quot;circle&quot;) .data(object_dataset) .enter() .append(&quot;circle&quot;) .attr(&quot;cx&quot;, d =&gt; d.cx) .attr(&quot;cy&quot;, d =&gt; d.cy) .attr(&quot;r&quot;, &quot;30&quot;) .attr(&quot;fill&quot;, d =&gt; d.fill); svg#objects 5.3 .map() What’s the issue? In R many operations are vectorized: sqrt(3) ## R output ## [1] 1.732051 x &lt;- c(3, 5, 7) sqrt(x) ## R output ## [1] 1.732051 2.236068 2.645751 Not so in JavaScript: Math.sqrt(3); // Try me in the Console var x = [3, 5, 7]; // Try me in the Console Math.sqrt(x); // Doesn&#39;t work... 5.3.1 Simple arrays Use .map() to operate on each array element separately. The concept is similar to lapply() or purrr::map(), but unlike in R, it’s needed for simple arrays. R x &lt;- c(3, 5, 7) sqrt(x) ## R output ## [1] 1.732051 2.236068 2.645751 JavaScript Do something to every element of a simple array: var x = [3, 5, 7]; // try me x.map(Math.sqrt); [4, 10, 12].map(d =&gt; d*3); // try me [4, 10, 12].map(function(d) {return d*3;}); // try me [10, 20, 30, 40].map((d, i) =&gt; d*i); // try me 5.3.2 Arrays of arrays Do something to the first item of every element of a nested array: [[1, 2], [3, 4]].map(d =&gt; Math.sqrt(d[0])) // try me Sum up all items in each element of the array: [[1, 2, 3], [4, 5, 6]].map(d =&gt; d[0] + d[1] + d[2]); // try me Created a nested array out of a simple array: [10, 20, 30].map(d =&gt; [d, Math.pow(d, 2)]); 5.3.3 Create arrays of objects Create an array of objects out of a simple array (note the parentheses around the object): [10, 20, 30].map(d =&gt; ({n: d, nsq: Math.pow(d, 2)})); // try me [10, 20, 30].map((d, i) =&gt; ({index: i, value: d})); // try me 5.4 Sorting Sorting in JavaScript sorts by character and modifies the original array: var x = [3, 1, 5, 12, 7]; // try me x.sort(); x; // try me If we don’t want to modify the original array we can make a copy. If we want to sort by number, not character, we can pass the comparator function d3.ascending to .sort(): var x = [3, 1, 5, 12, 7]; // try me var y = x.slice(); y.sort(d3.ascending); 5.5 D3 statistics link to API D3 brings us back to familiar ground with functions that take an array and return a single value. Here are D3 functions with the same names and behavior as their R equivalents: R D3 min(x) d3.min(x) max(x) d3.max(x) sum(x) d3.sum(x) mean(x) d3.mean(x) median(x) d3.median(x) A few with different names: R D3 range(x) d3.extent(x) var(x) d3.variance(x) sd(x) d3.deviation(x) Quantiles works a bit differently in D3: the value returned depends on the sort order of x. Therefore it is crucial to sort the array first. Next, p takes a single value, not an array as in R. R D3 quantile(x) d3.quantile(x, p) Thus for a single quantile we have: var x = [12, 34, 1, 43, 90, 72]; // try me var y = x; d3.quantile(y.sort(d3.ascending), .25); https://github.com/d3/d3/blob/master/API.md#statistics 5.6 D3 + .map() D3 statistics functions combined with .map() can be helpful in a variety of situations. Vectorizing a parameter, for example to mimic quantile(x) in R: R x &lt;- c(1, 12, 34, 43, 72, 90); quantile(x) ## R output ## 0% 25% 50% 75% 100% ## R output ## 1.00 17.50 38.50 64.75 90.00 JavaScript var x = [1, 12, 34, 43, 72, 90]; // try me [0, .25, .5, .75, 1].map(p =&gt; d3.quantile(x, p)); Sum up the first item of all elements in an array of arrays: R l &lt;- list(c(100, 200, 40), c(300, 150, 20)) sum(purrr::map_dbl(l, ~.x[1])) ## R output ## [1] 400 JavaScript var dataset = [[100, 200, 40], [300, 150, 20]]; // try me d3.sum(dataset.map(d =&gt; d[0])); Sum up all items in each array to create a simple array: R l &lt;- list(c(100, 200, 40), c(300, 150, 20)) purrr::map_dbl(l, ~sum(.x)) ## R output ## [1] 340 470 JavaScript var dataset = [[100, 200, 40], [300, 150, 20]]; // try me dataset.map(d =&gt; d3.sum(d)); "],
["scales-and-axes.html", "6 Scales and Axes 6.1 Scales 6.2 Margins 6.3 Axes", " 6 Scales and Axes 6.1 Scales 6.1.1 Lecture slides Scales 6.1.2 Practice See: IDVW2, Chapter 7: Scales Practice creating an ordinal scale in the Console: var ordscale = d3.scaleBand() .domain([0, 1, 2, 3, 4]) .range([0, 100]); ordscale(1); Try other numbers: ordscale(3);, ordscale(2.5);, ordscale(7);, etc. Add inner padding and try again. See diagram here: https://github.com/d3/d3-scale#band-scales *Be sure to use d3.scaleBand(), not d3.scaleOrdinal() for this use case. 6.1.3 Examples d3.scaleBand() IDVW2 Chapter 9, pp. 150-153 Vertical bar chart with labels d3.scaleBand() used to create an xScale function to convert bar numbers to pixels. Change the w parameter and observe how the bars are resized to fit on the SVG. d3.scaleBand.html d3.scaleLinear() Vertical bar chart with labels d3.scaleLinear() is added to create a yScale function to convert bar heights to pixels. Change the data and observe how the bars are resized to fit on the SVG. d3.scaleLinear.html 6.2 Margins 6.2.1 Lecture slides Margins “Margin convention” var w = 500; var h = 400; var margin = {top: 25, right: 0, bottom: 25, left: 25}; var innerWidth = w - margin.left - margin.right; var innerHeight = h - margin.top - margin.bottom; 6.2.2 Example Full example, vertical bar chart with margins: margins.html 6.3 Axes See: IDVW2, Chapter 8: Axes 6.3.1 Lecture slides Axes 6.3.2 Example Full example: vertical bar chart with axes: axes.html Practice changing the data and seeing what happens. "],
["interactivity.html", "7 Interactivity 7.1 Binding event listeners 7.2 What is this? 7.3 Add / remove “buttons” 7.4 Putting it all together 7.5 Dependent event listeners", " 7 Interactivity Read IDVW2, Chapter 10: Interactivity 7.1 Binding event listeners (100, 150) Open Developer Tools and try this code in the Console: d3.select(&quot;svg&quot;) .on(&quot;click&quot;, function () { d3.select(&quot;svg&quot;) .append(&quot;text&quot;) .attr(&quot;x&quot;, &quot;100&quot;) .attr(&quot;y&quot;, &quot;40&quot;) .text(&quot;Hello World&quot;); }); 7.2 What is this? In the context of event handlers, “this” is the element that received the event, a.k.a. what you clicked on if it’s a click event. Examples from the first chapter: d3.select(&quot;line&quot;) .on(&quot;click&quot;, function() { d3.select(this) .attr(&quot;stroke-width&quot;, &quot;10&quot;); }); d3.select(&quot;svg&quot;) .on(&quot;click&quot;, function() { d3.select(&quot;text&quot;) .text(`(${d3.mouse(this).map(Math.round)})`) }); We can separate the function and the event listener: function goyellow() { d3.select(this) .attr(&quot;fill&quot;, &quot;yellow&quot;) }; d3.select(&quot;circle&quot;) .on(&quot;mouseover&quot;, goyellow); Try this in the Console: d3.select(&quot;svg&quot;) .on(&quot;click&quot;, function () { console.log(d3.mouse(this)); }); 7.2.1 Location on SVG d3.mouse(this) 7.2.2 Attribute of an element d3.select(this).attr(&quot;id&quot;); 7.2.3 Value of radio button d3.select(this).node().value; (string) +d3.select(this).node().value; (number) 7.3 Add / remove “buttons” (HTML paragraphs are used as buttons in this example.) HTML: &lt;p id=&quot;add&quot;&gt;Add an element&lt;/p&gt; &lt;p id=&quot;remove_left&quot;&gt;Remove bar (left)&lt;/p&gt; &lt;p id=&quot;remove_right&quot;&gt;Remove bar (right)&lt;/p&gt; JavaScript: d3.selectAll(&quot;p&quot;) .on(&quot;click&quot;, function () { var paraID = d3.select(this).attr(&quot;id&quot;); if (paraID == &quot;add&quot;) { var newvalue = Math.floor(Math.random()*400); bardata.push(newvalue); } else if (paraID == &quot;remove_left&quot;) { bardata.shift(); } else { bardata.pop(); }; update(bardata); }); 7.4 Putting it all together Vertical bar chart with add / remove buttons and general update pattern vertical_bar.html 7.5 Dependent event listeners In these examples, the behavior or existence of one event listener depends on another. 7.5.1 Global variable example Here the circle click behavior depends on the value of the radio button: if the “Move left” radio button is checked, the circle will move left when clicked. If the “Move right” radio button is checked, the circle will move right when clicked. A global variable is used to keep track of the radio button value. The event listener on the circle conditions the behavior on the value of this global variable. Click the circle. Move left Move right svg#radio // global variable keeps track of which radio button is clicked var action = &quot;left&quot;; d3.select(&quot;div#radio&quot;) .selectAll(&quot;input&quot;) .on(&quot;click&quot;, function() { action = d3.select(this).node().value; }); // circle click behavior depends on value of &quot;action&quot; d3.select(&quot;svg#radio&quot;).select(&quot;circle&quot;) .on(&quot;click&quot;, function () { if (action == &quot;left&quot;) { var cx_new = +d3.select(this).attr(&quot;cx&quot;) - 50; if (cx_new &lt; 20) cx_new = 20; } else { var cx_new = +d3.select(this).attr(&quot;cx&quot;) + 50; if (cx_new &gt; 280) cx_new = 280; } d3.select(this) .transition() .duration(500) .attr(&quot;cx&quot;, cx_new); }); 7.5.2 Turn off event listener In this example, the event listeners on the squares are turned on or off depending on the value of the radio button. Event listeners can be removed by setting the behavior to null. Click a square. Red active Blue active svg#radio2 // movement function var jump = function () { d3.select(this).transition().duration(500) .attr(&#39;y&#39;, &#39;0&#39;) .transition().duration(500).ease(d3.easeBounce) .attr(&#39;y&#39;, &#39;75&#39;) }; // initial setup: add event listener to red square d3.select(&quot;svg#radio2&quot;) .select(&quot;rect#red&quot;) .on(&quot;click&quot;, jump); // switch event listeners if radio button is clicked d3.select(&quot;div#radio2&quot;).selectAll(&quot;input&quot;) .on(&quot;click&quot;, function () { if (d3.select(this).node().value == &quot;blue&quot;) { d3.select(&quot;svg#radio2&quot;).select(&quot;rect#blue&quot;).on(&quot;click&quot;, jump); d3.select(&quot;svg#radio2&quot;).select(&quot;rect#red&quot;).on(&quot;click&quot;, null); } else { d3.select(&quot;svg#radio2&quot;).select(&quot;rect#red&quot;).on(&quot;click&quot;, jump); d3.select(&quot;svg#radio2&quot;).select(&quot;rect#blue&quot;).on(&quot;click&quot;, null); } }); "],
["transitions.html", "8 Transitions 8.1 Examples 8.2 Do this 8.3 Not this 8.4 Strategy", " 8 Transitions Read IDVW2, Chapter 9: transitions section (pp. 158-178) 8.1 Examples Open Developer Tools and try in the Console: d3.select(&quot;svg&quot;) .selectAll(&quot;circle&quot;) .transition() .duration(2000) .attr(&quot;cx&quot;, &quot;275&quot;); d3.select(&quot;svg&quot;) .selectAll(&quot;circle&quot;) .transition() .duration(2000) .attr(&quot;cx&quot;, &quot;25&quot;) .attr(&quot;fill&quot;, &quot;green&quot;); 8.2 Do this Run simultaneous transitions on different selections: d3.select(&quot;svg&quot;).selectAll(&quot;circle#henry&quot;).transition() .duration(2000).attr(&quot;cx&quot;, &quot;275&quot;); d3.select(&quot;svg&quot;).selectAll(&quot;circle.apple&quot;).transition() .duration(2000).attr(&quot;cx&quot;, &quot;25&quot;); Run sequential transitions on the same selection in one chain: d3.select(&quot;svg&quot;).selectAll(&quot;circle&quot;) .transition().duration(2000).attr(&quot;cx&quot;, &quot;275&quot;) .transition().duration(2000).attr(&quot;cx&quot;, &quot;25&quot;); Transition from something to something: d3.select(&quot;svg&quot;).append(&quot;circle&quot;) .attr(&quot;cx&quot;, &quot;200&quot;) .attr(&quot;cy&quot;, &quot;100&quot;) .attr(&quot;r&quot;, &quot;5&quot;) .attr(&quot;fill&quot;, &quot;lightblue&quot;) .transition() .duration(4000) .attr(&quot;r&quot;, &quot;25&quot;) .attr(&quot;fill&quot;, &quot;blue&quot;); 8.3 Not this DO NOT run two transitions on the same selection at the same time (see p. 172). (What works in the Console will not work in a script.) d3.select(&quot;svg&quot;).selectAll(&quot;circle&quot;).transition() .duration(2000).attr(&quot;cx&quot;, &quot;250&quot;); d3.select(&quot;svg&quot;).selectAll(&quot;circle&quot;).transition() .duration(2000).attr(&quot;cx&quot;, &quot;75&quot;); DO NOT transition from nothing to something: d3.select(&quot;svg&quot;).append(&quot;circle&quot;) .transition() .duration(2000) .attr(&quot;cx&quot;, &quot;200&quot;) .attr(&quot;cy&quot;, &quot;100&quot;) .attr(&quot;r&quot;, &quot;25&quot;) .attr(&quot;fill&quot;, &quot;red&quot;); DO NOT store a selection with a transition (it’s no longer a selection with the transition): Try this: var circ = d3.select(&quot;svg&quot;) .selectAll(&quot;circle&quot;) .data([50, 95, 100, 200, 50, 150, 250]) .enter() .append(&quot;circle&quot;) .attr(&quot;cx&quot;, d =&gt; d) .attr(&quot;cy&quot;, &quot;100&quot;) .attr(&quot;fill&quot;, &quot;blue&quot;) .attr(&quot;r&quot;, &quot;0&quot;) .transition() .duration(2000) .attr(&quot;r&quot;, &quot;25&quot;); And then this: circ.attr(&quot;fill&quot;, &quot;green&quot;); DO NOT put a transition before a merge: d3.select(&quot;svg&quot;) .selectAll(&quot;circle&quot;) .transition() .duration(2000) .attr(&quot;cx&quot;, &quot;300&quot;) .merge(&quot;oldcirc&quot;) .attr(&quot;fill&quot;, &quot;green&quot;); BE AWARE that not everything transitions (for example, text doesn’t.) 8.4 Strategy Example 1 Think carefully about what you want to happen, and then decide what goes before and after the transition. Plan what you want to happen: New bars appear with orange fill. All bars in proper location. Fill color for all bars transitions to blue. Add code: var bars = d3.selectAll(&quot;svg&quot;) .selectAll(&quot;rect&quot;) .data(dataset); bars.enter() // 1. new bars .append(&quot;rect&quot;) .attr(&quot;fill&quot;, &quot;orange&quot;) .merge(bars) // 2. all bars in location .attr(&quot;x&quot;, ...) .attr(&quot;y&quot;, ...) .attr(&quot;width&quot;, ...) .attr(&quot;height&quot;, ...) .transition() .duration(2000) .attr(&quot;fill&quot;, &quot;blue&quot;); // 3. all transition to blue Example 2 Plan A new bar appears from the right side. Once it reaches its spot, it turns purple. (Try this one.) var bars = d3.selectAll(&quot;svg&quot;) .append(&quot;g&quot;) .selectAll(&quot;rect&quot;) .data([125]); bars.enter() .append(&quot;rect&quot;) .attr(&quot;x&quot;, &quot;325&quot;) .attr(&quot;y&quot;, d =&gt; 200 - d ) .attr(&quot;width&quot;, &quot;30&quot;) .attr(&quot;height&quot;, d =&gt; d) .attr(&quot;fill&quot;, &quot;blue&quot;) .transition() .duration(3000) .attr(&quot;x&quot;, &quot;50&quot;) // transition only affect &quot;x&quot; .transition(2000) .duration(2000) .attr(&quot;fill&quot;, &quot;purple&quot;); // 2nd transition Further reading: Working with Transitions. "],
["object.html", "9 Object Constancy 9.1 No object constancy 9.2 Object constancy", " 9 Object Constancy 9.1 No object constancy Transitions Off On Add an element Remove bar (right) Remove bar (left) Of note: Rather than smoothly transitioning off to the left, all bars are resized when “Remove bar (left)” is clicked When &quot;Remove bar (right) is clicked, the bar on the right immediately disappears, and then the remaining bars transition to their new places to the right. 9.2 Object constancy Slides: object_constancy.pdf Example: object_constancy.html Of note: Bars now smoothly transition off to the left and right 9.2.1 Practice joining data by key Download and open keys.html (or open this online version) in a new tab. Try the following: var svg = d3.select(&quot;svg&quot;); var dataset = [{key: 12, x: 100, y: 200}, {key: 16, x: 250, y: 300}]; svg.selectAll(&quot;text&quot;) .data(dataset, d =&gt; d.key) .exit() .remove(); Then: svg.selectAll(&quot;text&quot;) .attr(&quot;x&quot;, d =&gt; d.x) .attr(&quot;y&quot;, d =&gt; d.y); (Refresh) var dataset = [{key: 23, x: 300, y: 150}, {key: 5, x: 450, y: 270}]; var databind = svg.selectAll(&quot;text&quot;) .data(dataset, d =&gt; d.key) databind.exit().remove(); Then: databind.enter().append(&quot;text&quot;) .attr(&quot;x&quot;, d =&gt; d.x) .attr(&quot;y&quot;, d =&gt; d.y) .text(d =&gt; `key: ${d.key}`); Experiment with other data binds. "],
["debugging-tips.html", "10 Debugging Tips ", " 10 Debugging Tips Make extensive use of Elements to see what’s being added to the DOM. Make extensive use of Console to check the values of variables and/or test code. Pay attention to errors in the Console. Use console.log() esp. in functions Post Minimal Working Examples on Piazza. See: “How to create a Minimal, Complete, and Verifiable example” “So you’ve been asked to make a reprex” (But don’t worry if it’s not perfect, we’re not going to judge.) Use a text editor that helps you identify unmatched () {} []. "],
["your-solutions-here.html", "11 Your solutions here ", " 11 Your solutions here Add your code and submit a PR. Web tech: shapes D3 in the Console: green circles D3 in the Console: blue circles D3 in the Console: data bind Update, Enter, and Exit: horizontal bar chart Update, Enter, and Exit: merge "],
["more-chapters-coming-soon.html", "12 More chapters coming soon 12.1 Maintainer links", " 12 More chapters coming soon via GIPHY 12.1 Maintainer links Edit bookdown.yml "]
]
